interface Account {
  csvTransactions(walletIds: [WalletId!]!): String!
  defaultWalletId: WalletId!
  id: ID!
  wallets: [Wallet!]!
}

type AccountDetail {
  coordinates: Coordinates
  createdAt: Timestamp!
  id: ID!
  level: AccountLevel
  owner: User!
  status: AccountStatus
  title: String
  username: Username
}

type AccountDetailPayload {
  accountDetails: AccountDetail
  errors: [Error!]!
}

enum AccountLevel {
  ONE
  TWO
}

enum AccountStatus {
  ACTIVE
  LOCKED
}

input AccountUpdateLevelInput {
  level: AccountLevel!
  uid: ID!
}

"""
An authentication code valid for a single use
"""
scalar AuthToken

type AuthTokenPayload {
  authToken: AuthToken
  errors: [Error!]!
}

type BTCWallet implements Wallet {
  balance: SignedAmount!
  id: ID!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  walletCurrency: WalletCurrency!
}

input BusinessUpdateMapInfoInput {
  latitude: Float!
  longitude: Float!
  title: String!
  username: Username!
}

type ConsumerAccount implements Account {
  csvTransactions(walletIds: [WalletId!]!): String!
  defaultWalletId: WalletId!
  id: ID!
  wallets: [Wallet!]!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

interface Error {
  message: String!
  path: [String]
}

enum ExchangeCurrencyUnit {
  BTCSAT
  USDCENT
}

union InitiationVia = InitiationViaIntraLedger | InitiationViaLn | InitiationViaOnChain

type InitiationViaIntraLedger {
  counterPartyUsername: Username
  counterPartyWalletId: WalletId
}

type InitiationViaLn {
  paymentHash: PaymentHash!
}

type InitiationViaOnChain {
  address: OnChainAddress!
}

type InputError implements Error {
  code: InputErrorCode!
  message: String!
  path: [String]
}

enum InputErrorCode {
  INVALID_INPUT
  VALUE_NOT_ALLOWED
  VALUE_TOO_LONG
  VALUE_TOO_SHORT
}

scalar Language

type LightningInvoice {
  confirmedAt: Timestamp
  createdAt: Timestamp!
  description: String!
  expiresAt: Timestamp
  isSettled: Boolean!
  received: SatAmount!
  request: LnPaymentRequest
  secret: LnPaymentSecret!
}

type LightningPayment {
  amount: SatAmount
  confirmedAt: Timestamp
  createdAt: Timestamp
  destination: LnPubkey
  request: LnPaymentRequest
  roundedUpFee: SatAmount
  secret: LnPaymentSecret
  status: LnPaymentStatus
}

"""
BOLT11 lightning invoice payment request with the amount included
"""
scalar LnPaymentRequest

scalar LnPaymentSecret

enum LnPaymentStatus {
  FAILED
  PENDING
  SETTLED
}

scalar LnPubkey

"""
Text field in a lightning payment transaction
"""
scalar Memo

type Mutation {
  accountUpdateLevel(input: AccountUpdateLevelInput!): AccountDetailPayload!
  accountUpdateStatus(input: UserUpdateStatusInput!): AccountDetailPayload!
  businessUpdateMapInfo(input: BusinessUpdateMapInfoInput!): AccountDetailPayload!
  userLogin(input: UserLoginInput!): AuthTokenPayload!
  userRequestAuthCode(input: UserRequestAuthCodeInput!): SuccessPayload!
}

"""
An address for an on-chain bitcoin destination
"""
scalar OnChainAddress

scalar OnChainTxHash

"""
An authentication code valid for a single use
"""
scalar OneTimeAuthCode

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type PaymentError implements Error {
  code: PaymentErrorCode!
  message: String!
  path: [String]
}

enum PaymentErrorCode {
  ACCOUNT_LOCKED
  INSUFFICENT_BALANCE
  INVOICE_PAID
  LIMIT_EXCEEDED
  NO_LIQUIDITY
  NO_ROUTE
}

scalar PaymentHash

"""
Phone number which includes country code
"""
scalar Phone

"""
Price amount expressed in base/offset. To calculate, use: `base / 10^offset`
"""
type Price {
  base: SafeInt!
  currencyUnit: ExchangeCurrencyUnit!
  formattedAmount: String!
  offset: Int!
}

type Query {
  accountDetailsByUserPhone(phone: Phone!): AccountDetail!
  accountDetailsByUsername(username: Username!): AccountDetail!
  allLevels: [AccountLevel!]!
  lightningInvoice(hash: PaymentHash!): LightningInvoice!
  lightningPayment(hash: PaymentHash!): LightningPayment!
  transactionById(id: ID!): Transaction
  transactionsByHash(hash: PaymentHash!): [Transaction]
}

"""
Non-fractional signed whole numeric value between -(2^53) + 1 and 2^53 - 1
"""
scalar SafeInt

"""
(Positive) Satoshi amount (i.g. quiz earning)
"""
scalar SatAmount

union SettlementVia = SettlementViaIntraLedger | SettlementViaLn | SettlementViaOnChain

type SettlementViaIntraLedger {
  """
  Settlement destination: Could be null if the payee does not have a username
  """
  counterPartyUsername: Username
  counterPartyWalletId: WalletId
}

type SettlementViaLn {
  paymentSecret: LnPaymentSecret
}

type SettlementViaOnChain {
  transactionHash: OnChainTxHash!
}

"""
An amount (of a currency) that can be negative (i.g. in a transaction)
"""
scalar SignedAmount

type SuccessPayload {
  errors: [Error!]!
  success: Boolean
}

"""
Timestamp field, serialized as Unix time (the number of seconds since the Unix epoch)
"""
scalar Timestamp

"""
Give details about an individual transaction.
Galoy have a smart routing system which is automatically
settling intraledger when both the payer and payee use the same wallet
therefore it's possible the transactions is being initiated onchain
or with lightning but settled intraledger.
"""
type Transaction {
  createdAt: Timestamp!
  direction: TxDirection!
  id: ID!

  """
  From which protocol the payment has been initiated.
  """
  initiationVia: InitiationVia!
  memo: Memo

  """
  Amount of sats paid by the user.
  """
  settlementAmount: SatAmount!
  settlementFee: SatAmount!

  """
  Price in USDCENT/SATS at time of settlement.
  """
  settlementPrice: Price!

  """
  To which protocol the payment has settled on.
  """
  settlementVia: SettlementVia!
  status: TxStatus!
}

"""
A connection to a list of items.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: Transaction
}

enum TxDirection {
  RECEIVE
  SEND
}

enum TxStatus {
  FAILURE
  PENDING
  SUCCESS
}

type User {
  createdAt: Timestamp!
  defaultAccount: AccountDetail
  id: ID!
  language: Language!
  phone: Phone!
}

input UserLoginInput {
  code: OneTimeAuthCode!
  phone: Phone!
}

input UserRequestAuthCodeInput {
  phone: Phone!
}

input UserUpdateStatusInput {
  status: AccountStatus!
  uid: ID!
}

"""
Unique identifier of a user
"""
scalar Username

interface Wallet {
  balance: SignedAmount!
  id: ID!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  walletCurrency: WalletCurrency!
}

enum WalletCurrency {
  BTC
}

"""
Unique identifier of a user
"""
scalar WalletId
